package com.mak.newword.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mak.newword.mvp.model.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "user_table".
*/
public class UserBeanDao extends AbstractDao<UserBean, Long> {

    public static final String TABLENAME = "user_table";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property HeadUrl = new Property(2, String.class, "headUrl", false, "HEAD_URL");
        public final static Property RecordDayNum = new Property(3, int.class, "recordDayNum", false, "RECORD_DAY_NUM");
        public final static Property RememberDayNum = new Property(4, int.class, "rememberDayNum", false, "REMEMBER_DAY_NUM");
        public final static Property RecordTotalNum = new Property(5, int.class, "recordTotalNum", false, "RECORD_TOTAL_NUM");
        public final static Property RememberTotalNum = new Property(6, int.class, "rememberTotalNum", false, "REMEMBER_TOTAL_NUM");
    };


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"user_table\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"HEAD_URL\" TEXT," + // 2: headUrl
                "\"RECORD_DAY_NUM\" INTEGER NOT NULL ," + // 3: recordDayNum
                "\"REMEMBER_DAY_NUM\" INTEGER NOT NULL ," + // 4: rememberDayNum
                "\"RECORD_TOTAL_NUM\" INTEGER NOT NULL ," + // 5: recordTotalNum
                "\"REMEMBER_TOTAL_NUM\" INTEGER NOT NULL );"); // 6: rememberTotalNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"user_table\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(3, headUrl);
        }
        stmt.bindLong(4, entity.getRecordDayNum());
        stmt.bindLong(5, entity.getRememberDayNum());
        stmt.bindLong(6, entity.getRecordTotalNum());
        stmt.bindLong(7, entity.getRememberTotalNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(3, headUrl);
        }
        stmt.bindLong(4, entity.getRecordDayNum());
        stmt.bindLong(5, entity.getRememberDayNum());
        stmt.bindLong(6, entity.getRecordTotalNum());
        stmt.bindLong(7, entity.getRememberTotalNum());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // headUrl
            cursor.getInt(offset + 3), // recordDayNum
            cursor.getInt(offset + 4), // rememberDayNum
            cursor.getInt(offset + 5), // recordTotalNum
            cursor.getInt(offset + 6) // rememberTotalNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHeadUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRecordDayNum(cursor.getInt(offset + 3));
        entity.setRememberDayNum(cursor.getInt(offset + 4));
        entity.setRecordTotalNum(cursor.getInt(offset + 5));
        entity.setRememberTotalNum(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
